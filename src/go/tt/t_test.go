package tt

import (
	"fmt"
	"regexp"
	"testing"
	"unicode/utf8"
)

func TestPo(t *testing.T) {
	a := [2]int{1, 2}
	b := [2]int{1, 2}
	fmt.Print(a == b)
}

var reg, _ = regexp.Compile(`^\d{11}$`)

func TestGo(t *testing.T) {
	fmt.Printf("%p\n", reg)
	k := reg.MatchString("1661100110011111")
	fmt.Println(k)

}

func TestUtf8(t *testing.T) {
	s := ""
	fmt.Println(len(s))
	fmt.Println(utf8.RuneCountInString(s))
}

type AutoGenerated struct {
	SectionList []struct {
		SectionName string `json:"SectionName"`
		KpList      []struct {
			Score      float64 `json:"Score"`
			ErrorCount float64 `json:"ErrorCount"`
			KpName     string  `json:"KpName"`
			IsStudy    float64 `json:"IsStudy"`
		} `json:"KpList"`
	} `json:"SectionList"`
}

func TestType99(t *testing.T) {
	s := &AutoGenerated{
		SectionList: []struct {
			SectionName string `json:"SectionName"`
			KpList      []struct {
				Score      float64 `json:"Score"`
				ErrorCount float64 `json:"ErrorCount"`
				KpName     string  `json:"KpName"`
				IsStudy    float64 `json:"IsStudy"`
			} `json:"KpList"`
		}{
			{
				SectionName: "fdfdfdf",
				KpList: []struct {
					Score      float64 `json:"Score"`
					ErrorCount float64 `json:"ErrorCount"`
					KpName     string  `json:"KpName"`
					IsStudy    float64 `json:"IsStudy"`
				}{},
			},
		},
	}
	fmt.Println(s)
}
